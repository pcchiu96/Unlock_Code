{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/unlock-code/src/App.js\";\nimport React, { useState, useRef } from \"react\";\nimport AttempList from \"./AttemptList\";\nimport uuidv4 from \"uuid/v4\";\nimport \"./App.css\";\n\nfunction App() {\n  // let codeSet = [...'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n  let codeSet = [...\"0123456789\"];\n  let codeSetIndex = generatePasswordIndex(codeSet);\n  const [attempts, setAttempts] = useState([]);\n  const passwordRef = useRef();\n\n  function handleUnlock() {\n    let password = passwordRef.current.value;\n\n    if (password) {\n      let t0 = performance.now();\n      let unlocked = unlock(password);\n      let t1 = performance.now();\n      unlocked.time = (t1 - t0).toFixed(4);\n      unlocked.id = uuidv4();\n      console.log(attempts.length);\n      setAttempts(prevAttemps => {\n        return [...prevAttemps, unlocked];\n      });\n    } else {\n      console.log(\"No input\");\n    }\n  } //this generates the password index with each key as digit {'a' : 11} so it can be used to find the index\n\n\n  function generatePasswordIndex(codeSet) {\n    let obj = {};\n    let length = codeSet.length;\n\n    for (let i = 0; i < length; i++) {\n      obj[codeSet[i]] = i;\n    }\n\n    return obj;\n  }\n\n  function unlock(password) {\n    let runner = codeSet[0]; //initial value\n\n    let n = 0;\n    let lastDigit = codeSet[codeSet.length - 1];\n    let firstDigit = codeSet[0];\n    let passwordLength = codeSet.length;\n    let index = 0;\n    let increment = 0;\n    let pointer = 1;\n    let next = \"\";\n    let digitIndex = 0;\n\n    while (password !== runner) {\n      if (increment === passwordLength) {\n        //one tick\n        if (isFlip(runner, lastDigit)) {\n          //at max digit value\n          runner = addDigit(codeSet, runner); //add a digit\n\n          runner = resetAllBefore(runner, runner.length, firstDigit); //reset all values before it to default\n\n          increment = 0;\n        } else {\n          next = runner.charAt(pointer);\n\n          while (next === lastDigit && pointer < runner.length) {\n            //find the next non last digit value\n            pointer++;\n            next = runner.charAt(pointer);\n          }\n\n          digitIndex = codeSetIndex[next] + 1;\n          runner = replaceAt(runner, codeSet[digitIndex], pointer);\n          runner = resetAllBefore(runner, pointer, firstDigit);\n          pointer = 1;\n          increment = 0;\n        }\n      }\n\n      runner = replaceAt(runner, codeSet[increment], index);\n      increment++; //console.log(runner);\n\n      n++;\n    }\n\n    console.log(\"Took \" + n + \" many tries.\");\n    return {\n      password: runner,\n      tries: n\n    };\n  } //this function checks if the string consists of the last digit, returns true if it is and false if otherwise\n\n\n  function isFlip(str, lastDigit) {\n    return str === lastDigit.repeat(str.length);\n  } //adds the first digit from password set to the string\n\n\n  function addDigit(array, str) {\n    return str + array[0];\n  } //this resets all the characters before the index to the first digit from password set\n\n\n  function resetAllBefore(str, index, firstDigit) {\n    return firstDigit.repeat(index) + str.substr(index);\n  }\n\n  function replaceAt(str, newStr, index) {\n    return str.substr(0, index) + newStr + str.substr(index + 1);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"background\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Welcome to Unlock Code\"), React.createElement(\"dl\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"dt\", {\n    className: \"col-sm-2 align-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"dd\", {\n    className: \"col-sm-9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"This is just a fun little project I made to see if I can replicate what\", \" \", React.createElement(\"a\", {\n    className: \"btn-link text-info\",\n    href: \"https://www.youtube.com/watch?v=yzGzB-yYKcc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Snowden\"), \" \", \"said about passwords under 8 characters can be solved under a second.\"), React.createElement(\"dt\", {\n    className: \"col-sm-2 align-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Guide\"), React.createElement(\"dd\", {\n    className: \"col-sm-9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Simply enter any code you would like my program to try unlock\"), React.createElement(\"dt\", {\n    className: \"col-sm-2 align-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Note\"), React.createElement(\"dd\", {\n    className: \"col-sm-9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"This obviously isn't a hack or anymeans. All it does is run every possible combination and hit with the code entered.\")), React.createElement(\"div\", {\n    className: \"form-inline mb-5 center_form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group mx-sm-3 mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    ref: passwordRef,\n    className: \"form-control\",\n    placeholder: \"Enter a code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: handleUnlock,\n    className: \"btn btn-info mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Unlock\")), React.createElement(\"table\", {\n    className: \"table table-hover table-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"#\"), React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Code\"), React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Amount of Tries\"), React.createElement(\"th\", {\n    scope: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Time Spend\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(AttempList, {\n    attempts: attempts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/paul/Desktop/unlock-code/src/App.js"],"names":["React","useState","useRef","AttempList","uuidv4","App","codeSet","codeSetIndex","generatePasswordIndex","attempts","setAttempts","passwordRef","handleUnlock","password","current","value","t0","performance","now","unlocked","unlock","t1","time","toFixed","id","console","log","length","prevAttemps","obj","i","runner","n","lastDigit","firstDigit","passwordLength","index","increment","pointer","next","digitIndex","isFlip","addDigit","resetAllBefore","charAt","replaceAt","tries","str","repeat","array","substr","newStr"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport AttempList from \"./AttemptList\";\nimport uuidv4 from \"uuid/v4\";\nimport \"./App.css\";\n\nfunction App() {\n    // let codeSet = [...'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n    let codeSet = [...\"0123456789\"];\n    let codeSetIndex = generatePasswordIndex(codeSet);\n\n    const [attempts, setAttempts] = useState([]);\n    const passwordRef = useRef();\n\n    function handleUnlock() {\n        let password = passwordRef.current.value;\n\n        if (password) {\n            let t0 = performance.now();\n            let unlocked = unlock(password);\n            let t1 = performance.now();\n            unlocked.time = (t1 - t0).toFixed(4);\n            unlocked.id = uuidv4();\n\n            console.log(attempts.length);\n\n            setAttempts(prevAttemps => {\n                return [...prevAttemps, unlocked];\n            });\n        } else {\n            console.log(\"No input\");\n        }\n    }\n\n    //this generates the password index with each key as digit {'a' : 11} so it can be used to find the index\n    function generatePasswordIndex(codeSet) {\n        let obj = {};\n        let length = codeSet.length;\n        for (let i = 0; i < length; i++) {\n            obj[codeSet[i]] = i;\n        }\n        return obj;\n    }\n\n    function unlock(password) {\n        let runner = codeSet[0]; //initial value\n        let n = 0;\n\n        let lastDigit = codeSet[codeSet.length - 1];\n        let firstDigit = codeSet[0];\n        let passwordLength = codeSet.length;\n        let index = 0;\n        let increment = 0;\n        let pointer = 1;\n\n        let next = \"\";\n        let digitIndex = 0;\n\n        while (password !== runner) {\n            if (increment === passwordLength) {\n                //one tick\n                if (isFlip(runner, lastDigit)) {\n                    //at max digit value\n                    runner = addDigit(codeSet, runner); //add a digit\n                    runner = resetAllBefore(runner, runner.length, firstDigit); //reset all values before it to default\n                    increment = 0;\n                } else {\n                    next = runner.charAt(pointer);\n                    while (next === lastDigit && pointer < runner.length) {\n                        //find the next non last digit value\n                        pointer++;\n                        next = runner.charAt(pointer);\n                    }\n\n                    digitIndex = codeSetIndex[next] + 1;\n\n                    runner = replaceAt(runner, codeSet[digitIndex], pointer);\n                    runner = resetAllBefore(runner, pointer, firstDigit);\n\n                    pointer = 1;\n                    increment = 0;\n                }\n            }\n\n            runner = replaceAt(runner, codeSet[increment], index);\n            increment++;\n\n            //console.log(runner);\n            n++;\n        }\n        console.log(\"Took \" + n + \" many tries.\");\n\n        return {\n            password: runner,\n            tries: n\n        };\n    }\n\n    //this function checks if the string consists of the last digit, returns true if it is and false if otherwise\n    function isFlip(str, lastDigit) {\n        return str === lastDigit.repeat(str.length);\n    }\n\n    //adds the first digit from password set to the string\n    function addDigit(array, str) {\n        return str + array[0];\n    }\n\n    //this resets all the characters before the index to the first digit from password set\n    function resetAllBefore(str, index, firstDigit) {\n        return firstDigit.repeat(index) + str.substr(index);\n    }\n\n    function replaceAt(str, newStr, index) {\n        return str.substr(0, index) + newStr + str.substr(index + 1);\n    }\n\n    return (\n        <div className='background'>\n            <div className='App'>\n                <header className='App-header'>Welcome to Unlock Code</header>\n                <dl className='row'>\n                    <dt className='col-sm-2 align-right'>Description</dt>\n                    <dd className='col-sm-9'>\n                        This is just a fun little project I made to see if I can replicate what{\" \"}\n                        <a className='btn-link text-info' href='https://www.youtube.com/watch?v=yzGzB-yYKcc'>\n                            Snowden\n                        </a>{\" \"}\n                        said about passwords under 8 characters can be solved under a second.\n                    </dd>\n\n                    <dt className='col-sm-2 align-right'>Guide</dt>\n                    <dd className='col-sm-9'>Simply enter any code you would like my program to try unlock</dd>\n\n                    <dt className='col-sm-2 align-right'>Note</dt>\n                    <dd className='col-sm-9'>\n                        This obviously isn't a hack or anymeans. All it does is run every possible combination and hit with the code\n                        entered.\n                    </dd>\n                </dl>\n                <div className='form-inline mb-5 center_form'>\n                    <div className='form-group mx-sm-3 mb-2'>\n                        <input type='text' ref={passwordRef} className='form-control' placeholder='Enter a code' />\n                    </div>\n                    <button onClick={handleUnlock} className='btn btn-info mb-2'>\n                        Unlock\n                    </button>\n                </div>\n                <table className='table table-hover table-dark'>\n                    <thead>\n                        <tr>\n                            <th scope='col'>#</th>\n                            <th scope='col'>Code</th>\n                            <th scope='col'>Amount of Tries</th>\n                            <th scope='col'>Time Spend</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <AttempList attempts={attempts} />\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}