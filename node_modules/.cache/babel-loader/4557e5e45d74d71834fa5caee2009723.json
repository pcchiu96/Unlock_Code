{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/unlock-code/src/App.js\";\nimport React, { useState, useRef } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  // let passwordSet = [...'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n  let passwordSet = [...\"0123456789\"];\n  let passwordSetIndex = generatePasswordIndex(passwordSet);\n  const [todos, setTodos] = useState([]); //figure this part out\n\n  const passwordRef = useRef();\n\n  function handleUnlock() {\n    let password = document.getElementById(\"password\").value;\n    let print = document.getElementById(\"print\");\n    let element = document.createElement(\"div\");\n\n    if (password) {\n      let t0 = performance.now();\n      let unlocked = unlock(password);\n      let t1 = performance.now();\n      let result = \"Password: \" + unlocked.password + \"<br>\" + \"Amount of tries: \" + unlocked.tries + \"<br>\" + \"Time it took: \" + (t1 - t0).toFixed(4) + \" ms\"; //use < /> plus {} instead\n\n      element.setAttribute(\"class\", \"result\");\n      element.innerHTML = result;\n      print.appendChild(element);\n    } else {\n      console.log(\"No input\");\n    }\n  } //this generates the password index with each key as digit {'a' : 11} so it can be used to find the index\n\n\n  function generatePasswordIndex(passwordSet) {\n    let obj = {};\n    let length = passwordSet.length;\n\n    for (let i = 0; i < length; i++) {\n      obj[passwordSet[i]] = i;\n    }\n\n    return obj;\n  }\n\n  function unlock(password) {\n    let runner = passwordSet[0]; //initial value\n\n    let n = 0;\n    let lastDigit = passwordSet[passwordSet.length - 1];\n    let firstDigit = passwordSet[0];\n    let passwordLength = passwordSet.length;\n    let index = 0;\n    let increment = 0;\n    let pointer = 1;\n    let next = \"\";\n    let digitIndex = 0;\n    let process = document.getElementById(\"process\");\n\n    while (password !== runner) {\n      if (increment === passwordLength) {\n        //one tick\n        if (isFlip(runner, lastDigit)) {\n          //at max digit value\n          runner = addDigit(passwordSet, runner); //add a digit\n\n          runner = resetAllBefore(runner, runner.length, firstDigit); //reset all values before it to default\n\n          increment = 0;\n        } else {\n          next = runner.charAt(pointer);\n\n          while (next === lastDigit && pointer < runner.length) {\n            //find the next non last digit value\n            pointer++;\n            next = runner.charAt(pointer);\n          }\n\n          digitIndex = passwordSetIndex[next] + 1;\n          runner = replaceAt(runner, passwordSet[digitIndex], pointer);\n          runner = resetAllBefore(runner, pointer, firstDigit);\n          pointer = 1;\n          increment = 0;\n        }\n      }\n\n      runner = replaceAt(runner, passwordSet[increment], index);\n      increment++; //console.log(runner);\n\n      n++;\n    }\n\n    console.log(\"Took \" + n + \" many tries.\");\n    return {\n      password: runner,\n      tries: n\n    };\n  } //this function checks if the string consists of the last digit, returns true if it is and false if otherwise\n\n\n  function isFlip(str, lastDigit) {\n    return str === lastDigit.repeat(str.length);\n  } //adds the first digit from password set to the string\n\n\n  function addDigit(array, str) {\n    return str + array[0];\n  } //this resets all the characters before the index to the first digit from password set\n\n\n  function resetAllBefore(str, index, firstDigit) {\n    return firstDigit.repeat(index) + str.substr(index);\n  }\n\n  function replaceAt(str, newStr, index) {\n    return str.substr(0, index) + newStr + str.substr(index + 1);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \" Welcome to Unlock Code \"), \" \", React.createElement(\"p\", {\n    className: \"App-paragraph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"This is just a fun little project I made to see if I can replicate what Snowden said about passwords under 8 characters can be solved under a second.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), \"Simply enter any code you would like my program to try unlock \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), \"and it 'll display the password you entered, amount of attempts and the time in milliseconds. \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), \"Note: This obviously isn 't a hack or anymeans. All it does is run every possible combination and compare it with the code entered.\", \" \"), \" \", React.createElement(\"div\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \" Enter a Code \"), \" \", React.createElement(\"div\", {\n    className: \"unlock_code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: handleUnlock,\n    id: \"unlock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Unlock\", \" \"), \" \"), \" \", React.createElement(\"div\", {\n    id: \"print\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \" \"), \" \");\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/paul/Desktop/unlock-code/src/App.js"],"names":["React","useState","useRef","App","passwordSet","passwordSetIndex","generatePasswordIndex","todos","setTodos","passwordRef","handleUnlock","password","document","getElementById","value","print","element","createElement","t0","performance","now","unlocked","unlock","t1","result","tries","toFixed","setAttribute","innerHTML","appendChild","console","log","obj","length","i","runner","n","lastDigit","firstDigit","passwordLength","index","increment","pointer","next","digitIndex","process","isFlip","addDigit","resetAllBefore","charAt","replaceAt","str","repeat","array","substr","newStr"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n    // let passwordSet = [...'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n    let passwordSet = [...\"0123456789\"];\n    let passwordSetIndex = generatePasswordIndex(passwordSet);\n\n    const [todos, setTodos] = useState([]); //figure this part out\n    const passwordRef = useRef();\n\n    function handleUnlock() {\n        let password = document.getElementById(\"password\").value;\n        let print = document.getElementById(\"print\");\n        let element = document.createElement(\"div\");\n\n        if (password) {\n            let t0 = performance.now();\n            let unlocked = unlock(password);\n            let t1 = performance.now();\n\n            let result =\n                \"Password: \" +\n                unlocked.password +\n                \"<br>\" +\n                \"Amount of tries: \" +\n                unlocked.tries +\n                \"<br>\" +\n                \"Time it took: \" +\n                (t1 - t0).toFixed(4) +\n                \" ms\";\n\n            //use < /> plus {} instead\n\n            element.setAttribute(\"class\", \"result\");\n            element.innerHTML = result;\n            print.appendChild(element);\n        } else {\n            console.log(\"No input\");\n        }\n    }\n\n    //this generates the password index with each key as digit {'a' : 11} so it can be used to find the index\n    function generatePasswordIndex(passwordSet) {\n        let obj = {};\n        let length = passwordSet.length;\n        for (let i = 0; i < length; i++) {\n            obj[passwordSet[i]] = i;\n        }\n        return obj;\n    }\n\n    function unlock(password) {\n        let runner = passwordSet[0]; //initial value\n        let n = 0;\n\n        let lastDigit = passwordSet[passwordSet.length - 1];\n        let firstDigit = passwordSet[0];\n        let passwordLength = passwordSet.length;\n        let index = 0;\n        let increment = 0;\n        let pointer = 1;\n\n        let next = \"\";\n        let digitIndex = 0;\n\n        let process = document.getElementById(\"process\");\n\n        while (password !== runner) {\n            if (increment === passwordLength) {\n                //one tick\n                if (isFlip(runner, lastDigit)) {\n                    //at max digit value\n                    runner = addDigit(passwordSet, runner); //add a digit\n                    runner = resetAllBefore(runner, runner.length, firstDigit); //reset all values before it to default\n                    increment = 0;\n                } else {\n                    next = runner.charAt(pointer);\n                    while (next === lastDigit && pointer < runner.length) {\n                        //find the next non last digit value\n                        pointer++;\n                        next = runner.charAt(pointer);\n                    }\n\n                    digitIndex = passwordSetIndex[next] + 1;\n\n                    runner = replaceAt(runner, passwordSet[digitIndex], pointer);\n                    runner = resetAllBefore(runner, pointer, firstDigit);\n\n                    pointer = 1;\n                    increment = 0;\n                }\n            }\n\n            runner = replaceAt(runner, passwordSet[increment], index);\n            increment++;\n\n            //console.log(runner);\n            n++;\n        }\n        console.log(\"Took \" + n + \" many tries.\");\n\n        return {\n            password: runner,\n            tries: n\n        };\n    }\n\n    //this function checks if the string consists of the last digit, returns true if it is and false if otherwise\n    function isFlip(str, lastDigit) {\n        return str === lastDigit.repeat(str.length);\n    }\n\n    //adds the first digit from password set to the string\n    function addDigit(array, str) {\n        return str + array[0];\n    }\n\n    //this resets all the characters before the index to the first digit from password set\n    function resetAllBefore(str, index, firstDigit) {\n        return firstDigit.repeat(index) + str.substr(index);\n    }\n\n    function replaceAt(str, newStr, index) {\n        return str.substr(0, index) + newStr + str.substr(index + 1);\n    }\n\n    return (\n        <div className='App'>\n            <header className='App-header'> Welcome to Unlock Code </header>{\" \"}\n            <p className='App-paragraph'>\n                This is just a fun little project I made to see if I can replicate what Snowden said about passwords under 8 characters can\n                be solved under a second.\n                <br />\n                <br />\n                <br />\n                Simply enter any code you would like my program to try unlock <br />\n                and it 'll display the password you entered, amount of attempts and the time in milliseconds. <br />\n                <br />\n                Note: This obviously isn 't a hack or anymeans. All it does is run every possible combination and compare it with the code\n                entered.{\" \"}\n            </p>{\" \"}\n            <div className='title'> Enter a Code </div>{\" \"}\n            <div className='unlock_code'>\n                <input type='password' id='password' />\n                <button onClick={handleUnlock} id='unlock'>\n                    Unlock{\" \"}\n                </button>{\" \"}\n            </div>{\" \"}\n            <div id='print'> </div>{\" \"}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}