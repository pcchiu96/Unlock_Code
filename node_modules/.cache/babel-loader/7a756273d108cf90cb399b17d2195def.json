{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/unlock-code/src/App.js\";\nimport React, { useState, useRef } from \"react\";\nimport AttempList from \"./AttemptList\";\nimport uuidv4 from \"uuid/v4\";\nimport \"./App.css\";\n\nfunction App() {\n  // let passwordSet = [...'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n  let passwordSet = [...\"0123456789\"];\n  let passwordSetIndex = generatePasswordIndex(passwordSet);\n  const [attempts, setAttempts] = useState([]);\n  const passwordRef = useRef();\n\n  function handleUnlock() {\n    let password = passwordRef.current.value;\n\n    if (password) {\n      let t0 = performance.now();\n      let unlocked = unlock(password);\n      let t1 = performance.now();\n      unlocked.time = (t1 - t0).toFixed(4);\n      unlocked.id = uuidv4();\n      console.log(unlocked);\n      setAttempts(prevAttemps => {\n        return [...prevAttemps, unlocked];\n      });\n    } else {\n      console.log(\"No input\");\n    }\n  } //this generates the password index with each key as digit {'a' : 11} so it can be used to find the index\n\n\n  function generatePasswordIndex(passwordSet) {\n    let obj = {};\n    let length = passwordSet.length;\n\n    for (let i = 0; i < length; i++) {\n      obj[passwordSet[i]] = i;\n    }\n\n    return obj;\n  }\n\n  function unlock(password) {\n    let runner = passwordSet[0]; //initial value\n\n    let n = 0;\n    let lastDigit = passwordSet[passwordSet.length - 1];\n    let firstDigit = passwordSet[0];\n    let passwordLength = passwordSet.length;\n    let index = 0;\n    let increment = 0;\n    let pointer = 1;\n    let next = \"\";\n    let digitIndex = 0;\n\n    while (password !== runner) {\n      if (increment === passwordLength) {\n        //one tick\n        if (isFlip(runner, lastDigit)) {\n          //at max digit value\n          runner = addDigit(passwordSet, runner); //add a digit\n\n          runner = resetAllBefore(runner, runner.length, firstDigit); //reset all values before it to default\n\n          increment = 0;\n        } else {\n          next = runner.charAt(pointer);\n\n          while (next === lastDigit && pointer < runner.length) {\n            //find the next non last digit value\n            pointer++;\n            next = runner.charAt(pointer);\n          }\n\n          digitIndex = passwordSetIndex[next] + 1;\n          runner = replaceAt(runner, passwordSet[digitIndex], pointer);\n          runner = resetAllBefore(runner, pointer, firstDigit);\n          pointer = 1;\n          increment = 0;\n        }\n      }\n\n      runner = replaceAt(runner, passwordSet[increment], index);\n      increment++; //console.log(runner);\n\n      n++;\n    }\n\n    console.log(\"Took \" + n + \" many tries.\");\n    return {\n      password: runner,\n      tries: n\n    };\n  } //this function checks if the string consists of the last digit, returns true if it is and false if otherwise\n\n\n  function isFlip(str, lastDigit) {\n    return str === lastDigit.repeat(str.length);\n  } //adds the first digit from password set to the string\n\n\n  function addDigit(array, str) {\n    return str + array[0];\n  } //this resets all the characters before the index to the first digit from password set\n\n\n  function resetAllBefore(str, index, firstDigit) {\n    return firstDigit.repeat(index) + str.substr(index);\n  }\n\n  function replaceAt(str, newStr, index) {\n    return str.substr(0, index) + newStr + str.substr(index + 1);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Welcome to Unlock Code\"), React.createElement(\"p\", {\n    className: \"App-paragraph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"This is just a fun little project I made to see if I can replicate what Snowden said about passwords under 8 characters can be solved under a second.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), \"Simply enter any code you would like my program to try unlock \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), \"and it'll display the password you entered (Hopefully), amount of attempts, and the time in milliseconds. \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), \"Note: This obviously isn 't a hack or anymeans. All it does is run every possible combination and compare it with the code entered.\"), React.createElement(\"div\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Enter a Code\"), React.createElement(\"div\", {\n    className: \"unlock_code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    ref: passwordRef,\n    className: \"form-control-plaintext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: handleUnlock,\n    className: \"btn btn-secondary btn-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Unlock\")), React.createElement(AttempList, {\n    attempts: attempts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/paul/Desktop/unlock-code/src/App.js"],"names":["React","useState","useRef","AttempList","uuidv4","App","passwordSet","passwordSetIndex","generatePasswordIndex","attempts","setAttempts","passwordRef","handleUnlock","password","current","value","t0","performance","now","unlocked","unlock","t1","time","toFixed","id","console","log","prevAttemps","obj","length","i","runner","n","lastDigit","firstDigit","passwordLength","index","increment","pointer","next","digitIndex","isFlip","addDigit","resetAllBefore","charAt","replaceAt","tries","str","repeat","array","substr","newStr"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport AttempList from \"./AttemptList\";\nimport uuidv4 from \"uuid/v4\";\nimport \"./App.css\";\n\nfunction App() {\n    // let passwordSet = [...'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n    let passwordSet = [...\"0123456789\"];\n    let passwordSetIndex = generatePasswordIndex(passwordSet);\n\n    const [attempts, setAttempts] = useState([]);\n    const passwordRef = useRef();\n\n    function handleUnlock() {\n        let password = passwordRef.current.value;\n\n        if (password) {\n            let t0 = performance.now();\n            let unlocked = unlock(password);\n            let t1 = performance.now();\n            unlocked.time = (t1 - t0).toFixed(4);\n            unlocked.id = uuidv4();\n\n            console.log(unlocked);\n\n            setAttempts(prevAttemps => {\n                return [...prevAttemps, unlocked];\n            });\n        } else {\n            console.log(\"No input\");\n        }\n    }\n\n    //this generates the password index with each key as digit {'a' : 11} so it can be used to find the index\n    function generatePasswordIndex(passwordSet) {\n        let obj = {};\n        let length = passwordSet.length;\n        for (let i = 0; i < length; i++) {\n            obj[passwordSet[i]] = i;\n        }\n        return obj;\n    }\n\n    function unlock(password) {\n        let runner = passwordSet[0]; //initial value\n        let n = 0;\n\n        let lastDigit = passwordSet[passwordSet.length - 1];\n        let firstDigit = passwordSet[0];\n        let passwordLength = passwordSet.length;\n        let index = 0;\n        let increment = 0;\n        let pointer = 1;\n\n        let next = \"\";\n        let digitIndex = 0;\n\n        while (password !== runner) {\n            if (increment === passwordLength) {\n                //one tick\n                if (isFlip(runner, lastDigit)) {\n                    //at max digit value\n                    runner = addDigit(passwordSet, runner); //add a digit\n                    runner = resetAllBefore(runner, runner.length, firstDigit); //reset all values before it to default\n                    increment = 0;\n                } else {\n                    next = runner.charAt(pointer);\n                    while (next === lastDigit && pointer < runner.length) {\n                        //find the next non last digit value\n                        pointer++;\n                        next = runner.charAt(pointer);\n                    }\n\n                    digitIndex = passwordSetIndex[next] + 1;\n\n                    runner = replaceAt(runner, passwordSet[digitIndex], pointer);\n                    runner = resetAllBefore(runner, pointer, firstDigit);\n\n                    pointer = 1;\n                    increment = 0;\n                }\n            }\n\n            runner = replaceAt(runner, passwordSet[increment], index);\n            increment++;\n\n            //console.log(runner);\n            n++;\n        }\n        console.log(\"Took \" + n + \" many tries.\");\n\n        return {\n            password: runner,\n            tries: n\n        };\n    }\n\n    //this function checks if the string consists of the last digit, returns true if it is and false if otherwise\n    function isFlip(str, lastDigit) {\n        return str === lastDigit.repeat(str.length);\n    }\n\n    //adds the first digit from password set to the string\n    function addDigit(array, str) {\n        return str + array[0];\n    }\n\n    //this resets all the characters before the index to the first digit from password set\n    function resetAllBefore(str, index, firstDigit) {\n        return firstDigit.repeat(index) + str.substr(index);\n    }\n\n    function replaceAt(str, newStr, index) {\n        return str.substr(0, index) + newStr + str.substr(index + 1);\n    }\n\n    return (\n        <div className='App'>\n            <header className='App-header'>Welcome to Unlock Code</header>\n            <p className='App-paragraph'>\n                This is just a fun little project I made to see if I can replicate what Snowden said about passwords under 8 characters can\n                be solved under a second.\n                <br />\n                <br />\n                Simply enter any code you would like my program to try unlock <br />\n                and it'll display the password you entered (Hopefully), amount of attempts, and the time in milliseconds. <br />\n                <br />\n                Note: This obviously isn 't a hack or anymeans. All it does is run every possible combination and compare it with the code\n                entered.\n            </p>\n            <div className='title'>Enter a Code</div>\n            <div className='unlock_code'>\n                <input type='text' ref={passwordRef} className='form-control-plaintext' />\n                <button onClick={handleUnlock} className='btn btn-secondary btn-sm'>\n                    Unlock\n                </button>\n            </div>\n            <AttempList attempts={attempts} />\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}